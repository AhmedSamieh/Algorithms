#define xUSE_CPP20
#include <iostream>
#include <vector>
#include <unordered_set>
#include <unordered_map>
#ifdef USE_CPP20
#include <shared_mutex>
#endif
#include <mutex>
#include <chrono>
#include <thread>

using namespace std;
using namespace std::chrono;

/**
 * // This is the HtmlParser's API interface.
 * // You should not implement it, or speculate about its implementation
 * class HtmlParser {
 *   public:
 *     vector<string> getUrls(string url);
 * };
 */
class benchmark
{
private:
    time_point<high_resolution_clock> startTimePoint;
public:
    benchmark()
    {
        startTimePoint = high_resolution_clock::now();
    }
    ~benchmark()
    {
        auto stopTimePoint = high_resolution_clock::now();
        auto duration = time_point_cast<microseconds>(stopTimePoint).time_since_epoch().count() -
                        time_point_cast<microseconds>(startTimePoint).time_since_epoch().count();
        cout << "duration : " << duration << " us" << endl;
    }
};
 class HtmlParser {
    vector<string> urls;
    unordered_map<string, size_t> url_index;
    vector<vector<size_t>> links;
public:
    HtmlParser() {}
    HtmlParser(vector<string>& input_urls, vector<vector<size_t>>& input_graph) : urls(input_urls)
    {
        for (size_t i = 0; i < urls.size(); ++i)
        {
            url_index.insert(make_pair(urls[i], i));
        }
        links.resize(urls.size() + 1);
        for (size_t i = 0; i < input_graph.size(); ++i)
        {
            links[input_graph[i][0]].push_back(input_graph[i][1]);
        }
    }
    vector<string> getUrls(string & input_url)
    {
        vector<string> ret;
        size_t index = url_index[input_url];
        for (auto &i : links[index])
        {
            ret.emplace_back(urls[i]);
        }
        this_thread::sleep_for(milliseconds(15));
        return ret;
    }
};
class Solution {
#ifdef USE_CPP20
    shared_mutex          guard;
#else
    mutex          guard;
#endif
    unordered_set<string> visited;
    void thread_func(HtmlParser &htmlParser, string &input_url, string &hostname) {
        if (input_url.substr(7, hostname.size()) == hostname) {
#ifdef USE_CPP20
            guard.lock_shared();
#else
            guard.lock();
#endif
            if (visited.find(input_url) != visited.end())
            {
#ifdef USE_CPP20
                guard.unlock_shared();
#else
                guard.unlock();
#endif
                return;
            }
#ifdef USE_CPP20
            guard.unlock_shared();
            guard.lock();
#endif
            visited.insert(input_url);
            guard.unlock();

            auto urls = htmlParser.getUrls(input_url);
            vector<thread> workers;
            for (auto &url : urls) {
                workers.push_back(thread(&Solution::thread_func, this, ref(htmlParser), ref(url), ref(hostname)));
            }
            for (auto &worker : workers)
            {
                worker.join();
            }
        }
    }
public:
    vector<string> crawl(string startUrl, HtmlParser& htmlParser) {
        vector<string> ret;
        size_t hostname_end = startUrl.find('/', 7);
        if (hostname_end == string::npos) {
            hostname_end = startUrl.size();
        }
        string hostname = startUrl.substr(7, hostname_end - 7);
        thread_func(htmlParser, startUrl, hostname);
        for (auto &url : visited) {
            ret.push_back(url);
        }
        return ret;
    }
};

#if 1
vector<string> urls {"http://kfk.rsxsr.red/hujy","http://kfk.rsxsr.red/xuvu","http://kfk.rsxsr.red/nwxa","http://kfk.rsxsr.red/nmde","http://kfk.rsxsr.red/dstq","http://kfk.rsxsr.red/nuty","http://kfk.rsxsr.red/zkre","http://kfk.rsxsr.red/pynq","http://kfk.rsxsr.red/veji","http://kfk.rsxsr.red/xsfe","http://kfk.rsxsr.red/parm","http://kfk.rsxsr.red/robm","http://kfk.rsxsr.red/hgne","http://kfk.rsxsr.red/dqhy","http://kfk.rsxsr.red/hcdo","http://kfk.rsxsr.red/bcxg","http://kfk.rsxsr.red/nmbg","http://kfk.rsxsr.red/bqlk","http://kfk.rsxsr.red/dqpm","http://kfk.rsxsr.red/zarw","http://kfk.rsxsr.red/nubq","http://kfk.rsxsr.red/nsru","http://kfk.rsxsr.red/dkry","http://kfk.rsxsr.red/zuxe","http://kfk.rsxsr.red/zuvg","http://kfk.rsxsr.red/rspq","http://kfk.rsxsr.red/hovi","http://kfk.rsxsr.red/hyjq","http://kfk.rsxsr.red/zeds","http://kfk.rsxsr.red/pela","http://kfk.rsxsr.red/pave","http://kfk.rsxsr.red/nsto","http://kfk.rsxsr.red/fmds","http://kfk.rsxsr.red/lavo","http://kfk.rsxsr.red/dmra","http://kfk.rsxsr.red/jwvi","http://kfk.rsxsr.red/huro","http://kfk.rsxsr.red/lgps","http://kfk.rsxsr.red/vkzm","http://kfk.rsxsr.red/hyna","http://kfk.rsxsr.red/lqrq","http://kfk.rsxsr.red/zgbg","http://kfk.rsxsr.red/fetu","http://kfk.rsxsr.red/pedw","http://kfk.rsxsr.red/vudu","http://kfk.rsxsr.red/hcpc","http://kfk.rsxsr.red/bofs","http://kfk.rsxsr.red/vkdi","http://kfk.rsxsr.red/nmbs","http://kfk.rsxsr.red/xqzs","http://kfk.rsxsr.red/rglm","http://kfk.rsxsr.red/zezo","http://kfk.rsxsr.red/dovw","http://kfk.rsxsr.red/nedi","http://kfk.rsxsr.red/vcju","http://kfk.rsxsr.red/vsxw","http://huv.szqjq.edu/xijq","http://mbe.ruruv.edu/whwl","http://dez.adqtk.edu/divm","http://ifk.tgpql.tech/kdwr","http://fcn.uzqxu.top/zsvq","http://azc.bsxol.edu/abiz","http://tgl.mlmps.ink/fupw","http://uto.dadwr.tech/yfiz","http://doh.gpgzg.xyz/pwtw","http://uba.voxmv.net/svih","http://pav.yvohw.pub/fqpc","http://ero.vypcv.com/ktyx","http://xmv.yhufk.top/jcpg","http://ehu.hmtqp.red/sxgv","http://vwh.shwfs.org/letc","http://wzc.jafsn.xyz/yjar","http://hof.cvatu.ink/pwfa","http://ohu.zyryt.red/gryx","http://jsh.iderm.top/povo","http://spa.tovux.com/snil","http://pwt.qtkxi.org/jkfm","http://arc.lwjid.xyz/spij","http://rup.yhmpa.ink/zgnc","http://yhc.pehwf.top/yhkr"};
vector<vector<size_t>> graph {{0,58},{0,1},{0,12},{0,43},{0,78},{0,37},{0,16},{0,15},{0,34},{0,9},{0,4},{0,51},{0,70},{0,77},{0,40},{0,23},{0,58},{0,33},{0,12},{1,14},{1,53},{1,0},{1,63},{1,34},{1,57},{1,36},{1,3},{1,38},{1,77},{1,40},{1,7},{1,74},{1,17},{1,76},{1,11},{1,46},{1,53},{1,16},{1,79},{1,50},{2,52},{2,19},{2,54},{2,45},{3,7},{3,26},{3,17},{3,12},{3,27},{3,46},{3,53},{3,16},{3,79},{3,50},{3,73},{3,20},{3,67},{3,22},{3,29},{3,8},{3,7},{3,10},{3,33},{3,44},{4,14},{4,5},{4,32},{4,79},{4,66},{4,41},{4,36},{4,19} ,{4,54},{4,77},{4,24},{4,23},{4,58},{5,44},{5,11},{5,62},{5,69},{5,64},{5,63},{5,18},{5,25},{5,4},{5,35},{5,6},{5,13},{5,40},{5,7},{5,26},{5,49},{5,60},{5,27},{5,78},{5,53},{5,16},{5,79},{5,2},{5,73},{6,67},{6,6},{6,77},{6,72},{6,39},{6,58},{6,49},{6,28},{6,43},{6,14},{6,53},{6,48},{6,15},{6,34},{6,73},{6,20},{6,35},{6,54},{6,61},{6,72},{6,55},{6,74},{6,49},{6,60},{6,27},{6,62},{6,21},{6,48},{6,79},{6,2},{6,41},{6,36},{6,19},{6,6},{7,24},{7,71},{7,58},{7,1},{7,28},{7,27},{7,62},{7,53},{7,64},{7,47},{7,66},{7,73},{7,68},{7,19},{7,38},{7,29},{7,24},{7,7},{7,42},{7,17},{7,28},{7,11},{7,46},{7,5},{7,64},{7,63},{7,2},{7,25},{7,52},{7,19},{8,45},{8,24},{8,7},{9,49},{9,44},{9,75},{9,78},{9,21},{9,16},{9,47},{9,66},{9,73},{9,20},{9,67},{9,38},{9,45},{9,8},{9,7},{9,26},{9,49},{9,60},{9,43},{9,46},{9,69},{9,48},{9,47},{9,66},{9,73},{9,4},{9,51},{9,22},{9,29},{9,8},{9,39},{9,10},{9,1},{9,28},{9,75},{9,30},{9,37},{10,15},{10,34},{10,57},{10,20},{10,19},{10,6},{10,45},{10,8},{10,71},{10,74},{10,33},{10,28},{10,43},{10,78},{10,69},{10,64},{10,31},{10,2},{10,9},{10,20},{10,3},{10,70},{10,29},{10,40},{10,71},{10,42},{10,1},{10,76},{10,75},{10,78},{10,37},{10,0},{11,34},{11,57},{11,52},{11,35},{11,22},{11,29},{11,8},{11,23},{11,74},{11,65},{11,28},{11,27},{11,30},{11,21},{11,16},{12,34},{12,57},{12,68},{12,3},{12,70},{12,61},{12,72},
                              {12,7},{12,42},{12,17},{12,28},{12,59},{12,78},{12,37},{12,48},{13,18},{13,41},{13,4},{13,19},{13,70},{13,13},{13,40},{14,26},{14,1},{14,28},{14,59},{14,14},{14,53},{14,64},{14,15},{14,50},{14,41},{14,4},{15,6},{15,77},{15,72},{15,39},{15,74},{15,49},{15,44},{15,43},{15,30},{15,69},{15,32},{15,79},{15,2},{15,41},{15,36},{15,35},{15,54},{16,56},{16,7},{16,74},{16,33},{16,28},{16,27},{16,46},{16,69},{16,0},{16,47},{16,2},{16,57},{16,20},{16,35},{16,6},{16,13},{16,56},{16,71},{16,58},{16,65},{16,12},{16,27},{16,78},{16,53},{16,0},{16,31},{16,18},{16,41},{16,4},{16,67},{17,45},{17,24},{17,71},{17,42},{17,49},{17,28},{17,11},{17,62},{17,53},{17,0},{17,47},{17,34},{17,57},{17,68},{17,35},{17,6},{17,45},{17,72},{17,23},{18,49},{18,60},{18,27},{18,14},{18,53},{19,47},{19,66},{19,57},{19,52},{19,19},{19,70},{19,77},{19,56},{19,39},{19,26},{19,17},{19,12},{19,75},{19,46},{19,69},{19,16},{19,31},{19,34},{19,25},{19,20},{19,35},{19,38},{19,77},{19,8},{20,10},{20,1},{20,44},{20,75},{20,62},{20,37},{20,16},{20,31},{20,34},{20,73},{20,68},{20,19},{20,6},{20,13},{20,24},{20,7},{20,42},{20,49},{20,76},{20,43},{20,78},{20,5},{20,48},{20,15},{20,2},{20,41},{20,4},{21,70},{21,77},{21,40},{21,71},{21,58},{21,65},{21,12},{21,43},{21,14},{22,0},{22,15},{22,50},{22,25},{22,52},{22,3},{22,38},{22,13},{22,56},{22,7},{23,17},{23,60},{23,11},{23,62},{23,37},{23,16},{23,63},{23,18},{23,9},{23,4},{23,3},{23,38},{23,77},{23,40},{23,71},{23,74},{23,1},{23,28},{23,43},{23,46},{23,53},{23,0},{23,79},{23,2},{23,41},{23,20},{23,35},{23,38},{23,45},{24,7},{24,26},{24,65},{24,44},{24,27},{24,30},{24,21},{24,64},{24,63},{24,18},{24,25},{24,68},{24,67},{24,54},{24,29},{24,56},{24,55},{24,58},{24,17},{24,60},{24,27},{24,62},{24,21},{24,16},{24,15},{24,2},{24,57},{24,36},{24,19},{24,22},{24,29},{24,24},{24,39},{24,10},{24,65},{24,76},{25,30},
                              {25,5},{25,16},{25,79},{25,18},{25,57},{25,20},{25,35},{25,54},{25,45},{25,40},{25,7},{25,58},{27,59},{27,30},{27,21},{27,48},{27,47},{27,66},{27,9},{27,20},{27,35},{27,54},{27,29},{27,24},{27,23},{27,10},{28,28},{28,27},{28,30},{28,5},{28,16},{28,47},{28,66},{28,9},{28,20},{28,35},{28,38},{28,29},{28,40},{28,23},{28,42},{28,65},{28,76},{28,59},{28,46},{28,69},{28,16},{28,63},{28,50},{28,41},{29,51},{29,70},{29,61},{29,40},{29,55},{29,26},{29,65},{29,12},{29,75},{29,46},{29,21},{29,16},{29,31},{29,50},{29,57},{29,20},{29,67},{29,38},{30,56},{30,71},{30,26},{30,1},{30,44},{30,43},{30,46},{30,69},{30,0},{30,47},{30,50},{30,41},{30,4},{30,51},{31,45},{31,72},{31,55},{31,10},{31,33},{31,28},{31,11},{31,62},{31,69},{31,48},{31,79},{31,66},{31,41},{31,36},{31,19},{31,70},{31,13},{31,72},{31,71},{31,26},{31,49},{31,60},{31,43},{31,30},{31,69},{31,48},{31,63},{32,73},{33,35},{33,6},{33,13},{33,56},{33,39},{33,26},{33,65},{33,12},{33,43},{33,62},{33,37},{33,0},{33,31},{33,18},{33,9},{33,52},{33,67},{33,6},{34,8},{34,7},{34,42},{34,17},{34,12},{34,75},{34,30},{34,53},{34,48},{34,15},{34,18},{34,73},{34,68},{34,19},{35,29},{35,56},{35,39},{35,74},{35,1},{35,44},{35,11},{35,78},{35,37},{35,48},{35,31},{35,18},{35,41},{35,52},{35,35},{35,6},{35,61},{35,8},{35,39},{35,42},{35,65},{35,76},{35,75},{35,46},{35,5},{35,64},{35,79},{36,9},{36,52},{36,51},{36,54},{36,45},{36,8},{36,55},{36,74},{36,17},{36,44},{36,43},{36,62},{36,5},{36,64},{36,79},{36,2},{36,41},{36,36},{36,3},{36,38},{36,13},{36,8},{36,71},{36,10},{36,49},{37,43},{37,30},{37,69},{37,32},{37,63},{37,50},{37,41},{37,36},{37,19},{37,70},{37,29},{37,24},{37,55},{37,10},{37,1},{37,44},{37,27},{37,30},{37,53},{37,48},{37,79},{37,2},{37,25},{37,36},{37,35},{37,22},{37,45},{37,40},{37,7},{37,10},{39,27},{39,46},{39,37},{39,16},{39,63},{39,66},{40,68},{40,3},
                              {40,22},{40,77},{40,24},{40,71},{40,58},{40,17},{40,76},{40,75},{40,14},{40,37},{40,16},{40,79},{40,50},{40,57},{40,36},{40,67},{40,38},{40,61},{41,23},{41,26},{41,65},{41,44},{41,59},{41,62},{41,37},{41,64},{41,79},{41,50},{41,9},{41,68},{41,51},{41,22},{41,61},{41,72},{41,23},{41,58},{41,1},{41,12},{41,27},{41,78},{41,69},{41,32},{41,79},{41,34},{41,73},{41,36},{42,6},{42,45},{42,8},{42,7},{42,10},{42,17},{42,12},{42,27},{42,14},{43,16},{43,47},{44,41},{44,20},{44,3},{44,70},{44,45},{44,72},{44,23},{44,42},{44,1},{44,44},{44,75},{44,30},{44,21},{44,48},{44,63},{44,2},{44,9},{45,35},{45,38},{45,29},{45,72},{45,7},{45,74},{45,17},{45,28},{45,75},{45,46},{46,64},{46,63},{46,34},{46,73},{46,52},{46,67},{46,38},{46,13},{46,56},{46,39},{46,42},{46,49},{46,28},{46,59},{46,30},{46,37},{46,64},{46,15},{46,18},{46,57},{46,20},{46,3},{46,70},{46,61},{46,72},{46,23},{46,74},{46,33},{46,44},{46,59},{46,46},{46,21},{46,0},{46,31},{47,57},{47,52},{47,35},{47,6},{47,61},{47,56},{47,39},{47,42},{47,65},{48,27},{48,14},{48,37},{48,32},{48,79},{48,50},{48,73},{48,20},{48,67},{48,70},{48,45},{48,56},{48,23},{48,10},{48,33},{48,44},{48,43},{48,30},{48,69},{48,16},{48,31},{48,50},{48,73},{48,52},{48,3},{48,38},{48,61},{48,8},{48,39},{48,42},{48,33},{48,12},{48,59},{48,14},{48,53},{48,0},{48,15},{48,18},{49,68},{49,67},{49,6},{49,77},{49,8},{49,39},{49,58},{49,49},{49,44},{49,59},{49,62},{49,21},{49,32},{49,15},{49,50},{49,57},{49,68},{49,35},{49,22},{49,77},{50,7},{50,42},{50,33},{50,12},{50,27},{50,46},{50,5},{50,0},{50,47},{50,18},{50,9},{50,52},{50,19},{50,6},{50,77},{50,24},{50,23},{50,74},{50,65},{50,12},{50,27},{50,14},{50,69},{50,32},{50,47},{50,2},{50,9},{50,68},{51,6},{51,29},{51,72},{51,23},{51,58},{51,65},{51,44},{51,75},{51,62},{51,53},{51,0},{51,15},{51,34},{51,57},{51,20},{51,51},{51,38},{51,13},{51,72},
                              {51,7},{51,74},{51,33},{51,28},{51,59},{51,46},{52,32},{52,31},{52,34},{52,25},{52,4},{52,67},{52,54},{52,13},{52,8},{52,39},{52,26},{52,1},{52,12},{52,27},{52,78},{52,21},{52,16},{52,15},{52,50},{52,25},{52,68},{52,51},{52,22},{52,29},{52,72},{52,39},{52,74},{52,1},{52,44},{52,75},{52,14},{52,69},{52,0},{52,31},{53,25},{54,35},{54,54},{55,56},{55,71},{55,58},{55,17},{55,60},{55,11},{55,46},{55,21},{55,0},{55,47},{55,18},{55,41},{55,52},{55,51},{56,29},{56,72},{56,7},{56,74},{56,49},{56,44},{56,27},{56,30},{56,37},{56,32},{56,79},{57,73},{57,20},{57,67},{57,70},{57,29},{57,72},{57,55},{57,42},{57,17},{58,11},{58,30},{58,5},{58,32},{58,63},{58,50},{58,41},{58,36},{58,19},{58,70},{58,77},{58,56},{58,55},{58,58},{58,33},{58,12},{58,59},{58,30},{58,53},{58,16},{58,47},{58,50},{58,57},{58,36},{58,35},{58,38},{58,61},{58,24},{58,23},{58,42},{58,65},{58,12},{58,43},{58,14},{58,5},{58,48},{58,47},{58,50},{59,4},{59,51},{59,22},{59,13},{59,72},{59,39},{59,10},{59,1},{59,12},{59,75},{59,78},{59,5},{59,32},{59,31},{59,66},{59,73},{59,20},{59,51},{59,54},{59,77},{59,24},{59,7},{59,10},{59,1},{59,28},{59,43},{59,14},{59,5},{60,31},{60,34},{60,9},{60,4},{60,19},{60,6},{60,29},{60,24},{60,55},{60,58},{60,17},{60,76},{60,59},{60,62},{60,37},{60,64},{60,47},{60,34},{60,57},{60,20},{60,3},{60,38},{60,61},{60,56},{60,55},{60,58},{60,1},{60,44},{60,75},{60,14},{60,69},{60,64},{61,66},{61,73},{61,68},{61,35},{61,22},{61,45},{61,56},{61,55},{61,58},{61,1},{61,60},{61,75},{61,46},{61,53},{61,16},{61,15},{61,50},{61,41},{61,36},{61,19},{61,6},{61,61},{61,40},{62,42},{62,33},{62,76},{62,43},{62,46},{62,5},{62,32},{62,47},{62,2},{62,25},{62,68},{62,19},{62,38},{62,13},{62,40},{62,39},{62,74},{62,33},{62,44},{63,78},{63,69},{63,64},{63,31},{63,34},{63,41},{63,68},{63,19},{63,22},{63,45},{63,40},{63,71},{63,42},{63,1},{63,12},
                              {63,27},{63,14},{63,37},{63,32},{63,79},{63,66},{64,68},{64,19},{64,54},{64,77},{64,8},{64,23},{64,58},{64,33},{64,60},{64,11},{64,46},{64,21},{64,0},{64,79},{64,2},{64,25},{64,52},{64,19},{64,70},{64,61},{65,23},{65,10},{65,65},{65,28},{66,14},{66,53},{66,48},{66,63},{66,18},{66,57},{66,52},{66,35},{66,54},{66,13},{66,8},{66,7},{66,10},{66,1},{66,44},{66,27},{66,30},{66,69},{66,48},{66,31},{66,34},{66,41},{66,4},{66,35},{66,54},{66,29},{66,24},{66,39},{66,42},{67,60},{67,75},{67,46},{67,5},{67,32},{67,31},{67,34},{67,57},{67,4},{67,3},{67,22},{67,13},{67,40},{67,23},{67,42},{67,33},{67,76},{67,11},{67,30},{67,37},{67,48},{67,15},{67,18},{67,9},{68,67},{68,70},{68,29},{68,72},{68,71},{68,26},{68,1},{68,12},{68,27},{68,62},{68,53},{68,32},{68,79},{68,66},{68,41},{68,36},{68,35},{68,6},{68,77},{68,24},{68,55},{68,58},{68,65},{68,76},{68,59},{68,62},{69,64},{69,63},{69,50},{69,57},{69,20},{69,19},{69,38},{69,29},{69,40},{69,7},{69,74},{69,1},{69,60},{69,59},{69,14},{69,37},{69,16},{69,15},{69,2},{69,25},{69,52},{69,19},{69,54},{69,13},{69,56},{69,23},{70,65},{70,76},{70,27},{70,46},{70,53},{70,64},{70,31},{70,50},{70,9},{70,68},{70,19},{70,54},{70,13},{70,56},{70,39},{70,26},{70,65},{70,76},{70,75},{70,62},{70,53},{70,32},{70,47},{70,18},{70,9},{70,36},{70,35},{70,6},{70,13},{71,7},{71,42},{71,49},{71,44},{72,30},{72,37},{72,16},{72,63},{72,66},{72,73},{72,36},{72,3},{72,6},{72,61},{72,24},{72,39},{72,58},{72,49},{72,60},{72,43},{72,78},{72,53},{72,16},{72,15},{72,66},{73,52},{73,67},{73,70},{73,45},{73,8},{73,7},{73,58},{73,65},{73,12},{73,43},{73,30},{73,53},{74,31},{74,34},{74,73},{74,20},{74,35},{74,70},{74,45},{74,72},{75,26},{75,1},{75,44},{75,27},{75,62},{75,5},{75,64},{75,47},{75,50},{75,9},{75,20},{75,35},{75,6},{75,61},{75,72},{75,55},{75,58},{75,17},{75,44},{75,27},{75,46},{75,5},{75,48},
                              {75,79},{75,2},{75,25},{75,68},{75,35},{75,38},{75,45},{75,72},{75,55},{75,10},{75,17},{75,76},{76,62},{76,5},{76,64},{76,47},{76,50},{76,25},{76,52},{76,51},{76,6},{76,13},{76,24},{76,39},{76,42},{76,65},{76,44},{76,11},{76,14},{76,5},{76,16},{76,15},{76,50},{76,41},{76,20},{76,19},{76,22},{76,77},{76,24},{76,23},{76,42},{77,12},{77,11},{77,62},{77,53},{77,64},{77,47},{77,34},{77,9},{77,4},{77,67},{77,38},{77,45},{77,40},{77,71},{77,74},{77,65},{77,44},{77,11},{77,14},{77,53},{77,32},{77,15},{77,66},{77,9},{77,68},{77,35},{77,38},{77,45},{77,72},{77,55},{77,58},{77,65},{78,59},{78,30},{78,5},{78,0},{78,47},{78,66},{80,68},{80,51},{80,70},{80,29},{80,24},{80,71},{80,10},{80,1},{80,28},{80,11},{80,46},{80,69},{80,32},{80,31},{80,34},{80,41},{80,52},{80,35},{80,70},{80,77},{80,40},{80,55},{80,10},{80,33},{80,12}};
string startUrl = "http://kfk.rsxsr.red/nmde";
#else
vector<string> urls {"http://news.yahoo.com","http://news.yahoo.com/news","http://news.yahoo.com/news/topics/","http://news.google.com","http://news.yahoo.com/us"};
vector<vector<size_t>> graph {{2,0},{2,1},{3,2},{3,1},{0,4}};
string startUrl = "http://news.yahoo.com/news/topics/";
//vector<string> expected_output {"http://news.yahoo.com","http://news.yahoo.com/news","http://news.yahoo.com/news/topics/","http://news.yahoo.com/us"};
#endif
int main()
{
    HtmlParser htmlParser(urls, graph);
    Solution sol;
    vector<string> x;
    {
        benchmark bm;
        x = sol.crawl(startUrl, htmlParser);
    }
    cout << "Output:" << endl;
    for (auto &s : x)
    {
        cout << s << endl;
    }
}
